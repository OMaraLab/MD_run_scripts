# save this file as ~/.bash_aliases, then add the following lines to ~/.bashrc
#
#     # Load aliases
#     if [ -f ~/.bash_aliases ]; then
#         . ~/.bash_aliases
#     fi
#

# template to transfer to your own user folders
alias ada="cd /scratch/q95/aq8103 && pwd"
alias gada="cd /g/data/q95/aq8103 && pwd"

alias lll="ll | grep -vE '\\.[oe][0-9]+'" # list files in directory exlcluding pbs log files 

# batch rename all files with name $1* to name $2*
rename_files() {
  local old_pattern="$1"
  local new_pattern="$2"
  for file in "$old_pattern"*; do
    mv "$file" "${file/$old_pattern/$new_pattern}"
  done
}


# qwhich : generates a list of the jobid and filepath of your currently queued jobs, 
# ordered alphabetically by file path, then appends this to the end of ~/joblog.log
# you can use this to check which jobs died overnight

# sometimes the massive unwieldy grep / sed / tr / awk chain is buggy but you can usually figure it out

qwhich() {
  echo "" >> ~/joblog.log
  echo "" >> ~/joblog.log
  date >> ~/joblog.log
  qstat -f | grep 'PBS_O_WORKDIR\|Job Id\|_r[0-9]|run[0-9][,]\|,PBS_O_SYSTEM' | sed 's/\t//g' | sed 's/PBS_O_WORKDIR=//' | sed 's/,PBS_O_SYSTEM=Linux,PROJECT=q95,PBS_NCI_HT=1,//' | tr -d '\n'  | sed 's/.gadi-pbs/   /g' | sed 's/Job Id/\nJob Id/g' | tr -d "," | sort -k 4 >> ~/joblog.log
  echo "" >> ~/joblog.log
  less +G ~/joblog.log
}


# cleanout:  changes \r (carriage return) to \n (newline) to make slurm-TKTKTK.out files easier to read on some ssh platforms
alias cleanout="sed -i 's|\r|\n|g'" # clean output file carriage returns for readability


# cleanoe:
cleanoe() {
      # reformat all .[oe][0-9]* files to be more readable, and compartmentalises them into ./oe/
      # if you pass the name of as .[oe][0-9]* file as an argument, it will use less +G to 
      # open that file and scroll to the end

cleanout *.[oe][0-9]*

  mydir="${PWD##*/}"

  if [ $mydir != "oe" ]
  then

      if [ ! -d oe ]
      then
          mkdir oe
      fi
      mv *.e[0-9]* oe/
      mv *.o[0-9]* oe/
  fi

  if [ -n "$1" ]; then
  # if passed an argument, open the file with name oe/$arg
    less +G oe/$1
  fi

      # Cleanoe Background:

      # every pbs job saves stdout to .o[0-9]* and stderr to .e[0-9]*
      # these files are very valuable during benchmarking and debugging, but are typically 
      # compeltely useless once a job is complete

      # We run our simulation in a large number of  multiple 4 hour blocks, which makes
      # a lot of *.[oe][0-9]* files. This makes ls and ll output very hard to read, and
      # chews up our inode quota

      # cleanoe reformats the files for readabilty, then moves them all to ./oe/ to keep
      # them out of the way, and make them easy to delete when you're done.

      # this also reformats them to make them easier to read

      # some terminal clients will render carriage returns as ^M rather than as a line break
      # which means the entire step by step mdrun output shows as one very, very long line
      # this sucks to interact with 

      # hence, for all *.[oe][0-9]* files in the working directory, change carriage returns to newlines.  
      # this makes files much more readable through some terminal platforms

}


parselog() {
# Find all .log files in the current working directory, searching recursively
# for each, save file path,final step reached, and ns/day to ./status.txt 
# good for checking the status of everything in a project really quickly, or for compiling benchmarking data

  status_file="status.txt"
  echo "========================" >> $status_file
  date >> $status_file

  for file in $(find . -type f -name '*.log' -not -name '[0-9][0-9]*.log' | sort -k 1) ;do 
    echo "Processing $file"

    # Add the file name to the status file
    echo $file >> $status_file
    echo >> $status_file

    # Get the last line that matches the pattern "Step           Time"
    step_time_line=$(grep -nP 'Step\s+Time' $file | tail -1 | cut -d ":" -f1)
    #echo $step_time_line
    # Add the found line, and the next line, to the status file
    #echo $(tail -2 $file | head -1) >> $status_file
    if [ -n "$step_time_line" ]; then
      sed -n "${step_time_line}p" $file >> $status_file
      sed -n "$((${step_time_line}+1))p" $file  >> $status_file
      echo >> $status_file
    fi

    # Get the last line that matches the pattern "Performance:"
    #echo $perf_line
    perf_line=$(grep -nP 'Performance:' $file | tail -1| cut -d ":" -f1)
    # Add the found line, and the preceeding line, to the status file
    if [ -n "$perf_line" ]; then
      sed -n "$((${perf_line}-1))p" $file >> $status_file
      sed -n "${perf_line}p" $file >> $status_file
    fi
    echo >> $status_file
    echo >> $status_file
  done
}