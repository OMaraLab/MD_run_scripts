# save this file as ~/.bash_aliases, then add the following lines to ~/.bashrc
#
#     # Load aliases
#     if [ -f ~/.bash_aliases ]; then
#         . ~/.bash_aliases
#     fi
#

# alias qstat to show relevant information about your own jobs, sorted by job name 
alias qstat='squeue --me -o "%.18i %.9P %.32j %.8u %.8T %.10M %.6D %R" --sort=+j'

# template to transfer to your own user folder
alias ada="cd /group/pawsey0420/ada && pwd"


# batch rename all files with name $1* to name $2*
rename_files() {
  local old_pattern="$1"
  local new_pattern="$2"
  for file in "$old_pattern"*; do
    mv "$file" "${file/$old_pattern/$new_pattern}"
  done
}

# cleanfile:  changes \r (carriage return) to \n (newline) to make slurm-TKTKTK.out files easier to read on some ssh platforms
alias cleanfile="sed -i 's|\r|\n|g'" # clean output file carriage returns for readability

# cleanout: run cleanfile every single slurm-*.out file, and put them all in an outfiles folder
# if passed a filename as an argument, open that file to the end
cleanout() {

  cleanfile slurm-[0-9]*[0-9].out

  mydir="${PWD##*/}"

  if [ $mydir != "outfiles" ]
  then

      if [ ! -d outfiles ]
      then
          mkdir outfiles
      fi
      mv slurm-[0-9]*[0-9].out outfiles/
  fi

  if [ -n "$1" ]; then
  # if passed an argument, open the file with name oe/$arg
    less +G outfiles/$1
  fi
}

alias cleanoe="cleanout"# if you use the command to sort pbs output files, run the command to sort slurm output files


parselog() {
# Recursively find all *.log files in the current working directory
# for each, save file path,final step reached, and ns/day to ./status.txt 
# good for checking the status of everything in a project really quickly, or for compiling benchmarking data

  status_file="status.txt"
  touch $status_file

    if [  ! -e "$status_file" ]; then
      echo "couldn't write to ${status_file}, instead writing to ~/jobstatus.txt"
      status_file="~/jobstatus.txt"
    fi

  echo "================================" >> $status_file
  date >> $status_file
  echo "================================" >> $status_file

  for file in $(find . -type f -name '*.log' -not -name '[0-9][0-9]*.log' | sort -k 1) ;do # excludes log files with names like "03*.log" which are usually energy minimisation or eq
    echo "Processing $file"

    # Add the file name to the status file
    echo $file >> $status_file
    echo >> $status_file

    # Get the last line that matches the pattern "Step           Time"
    step_time_line=$(grep -nP 'Step\s+Time' $file | tail -1 | cut -d ":" -f1)
    #echo $step_time_line
    # Add the found line, and the next line, to the status file
    #echo $(tail -2 $file | head -1) >> $status_file
    if [ -n "$step_time_line" ]; then
      sed -n "${step_time_line}p" $file >> $status_file
      sed -n "$((${step_time_line}+1))p" $file  >> $status_file
      echo >> $status_file
    fi

    # Get the last line that matches the pattern "Performance:"
    #echo $perf_line
    perf_line=$(grep -nP 'Performance:' $file | tail -1| cut -d ":" -f1)
    # Add the found line, and the preceeding line, to the status file
    if [ -n "$perf_line" ]; then
      sed -n "$((${perf_line}-1))p" $file >> $status_file
      sed -n "${perf_line}p" $file >> $status_file
    fi
    echo >> $status_file
    echo >> $status_file
  done
}